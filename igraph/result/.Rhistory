data = data.frame("")
resultDf = data.frame("")
#Loop : Count the number of the csv files.
##If the target edge csv file is found out, NumOfCsv is counted up and the csv file path is stored into the ListOfCsv.
ListOfFile = list.files("/Users/amazon/app/01.eclipseWorkspaces/luna_soot/soot/tmp/igraph/csv")
NumOfFiles = length(ListOfFile)
NumOfFiles
i = 1
for(i in i:NumOfFiles){
##Read the edge's csv files under the designated working directory.
fileName = str_trim(ListOfFile[i], side="both")
data = read.csv(fileName, header=T, sep="\t")
##Store each calculated specific value into each value's vector object.
##At the same time, the binary 0 or 1 data is put into this vector's the first column as the teaching data.
#CSV file name.
target_c[i] = str_sub(ListOfFile[i], start = 17, end = -5)
#Teaching Data : Modified 1 , No-changed 0
#TODO: How to integrate gitbub information?
teaching_c[i] = 1
#Calculate the number of Jimple step.
length = data.frame(table(data[,3]))
step_c[i] = length[1,2] + length[2,2]
#Calculate CCNA = (The number of IF or GOTO jimple statement) - 1
s = 1
maxStep = step_c[i]
count = 0
if(maxStep > 1) {
for(s in 1:maxStep){
subset = str_sub(data[s,1], start=1, end=2)
if(subset == "if"){
count = count + 1
} else if( subset == "go") {
count = count + 1
}
}
} else if(maxStep <= 1){
count = 1
}
ccna_c[i] = count
#Detect CRUD info.
length[2,2]
idau_c[i] = length[2,2] / step_c[i]
#Delete Third CRUD boolean data.
data = data[,-3]
#Convert the data-frame to graph data.
g <- graph.data.frame(data, directed = TRUE)
#Get ride of the multiple edges and self loops from whole of graph.
g <- simplify(g,remove.multiple=T,remove.loops=T)
#Visualize this graph for check.
plot(g, vertex.size=3, vertex.label.font=0.1, vertex.label.cex=0.1, edge.arrow.size=0.3, vertex.color="blue", layout=layout_with_kk)
#Edge Density
edge_dencity_c[i] = c(edge_density(g))
#Graph Degree (variant)
graph_degree_c[i] = var(degree(g))
#近接中心性:ある要件を満たすグラフの最短経路長の「合計」に着目したものもあります。
#あるノードから他のノードへの最短経路長の合計*4の逆数を取ったものを「近接中心性」
#(closeness centrality)と呼びます。
pdf(str_c(wdPath, "/pdf/", target_c[i], "_closeness_centrality.pdf")) #Open PDF
closeness_centrality_c = c()
g.cls<-closeness(g,mode = 'out')
plot(g,vertex.size=g.cls*20000, main='Closeness Centrality', edge.arrow.size=0.3, vertex.label.cex=0.1, vertex.color="blue", layout=layout_with_kk)
closeness_centrality_c[i] = var(g.cls)
closeness_centrality_c
dev.off() #Save PDF
#「離心中心性」(eccentricity centrality):グラフ全体を最短経路長を長さの単位とする
#円（球）*2とみなした上で、その「中心」からの距離*3の逆数を取ったもの。端的に
#言えば、グラフのど真ん中に近ければ近いほど大きくなる。
pdf(str_c(wdPath, "/pdf/", target_c[i], "_eccentricity_centrality.pdf")) #Open PDF
eccentricity_centrality<-closeness(g,mode = "in") #in, all, out, total
plot(g, vertex.size=eccentricity_centrality*20000, main='Eccentricity Centrality', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
eccentricity_centrality_c[i] = var(eccentricity_centrality)
eccentricity_centrality_c
dev.off() #Save PDF
#Centralization
#固有ベクトル中心性:他の次数中心性の高いノード「とつながっている」ノードを評価するような指標
pdf(str_c(wdPath, "/pdf/", target_c[i], "_centralization.pdf")) #Open PDF
g.evcent<-evcent(g,directed = T)
plot(g,vertex.size=g.evcent$vector*15, main='Centralization', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
centralization_c[i] = var(str_subset(unlist(g.evcent), "\\d+"))
centralization_c
dev.off() #Save PDF
#PageRank:「リンク（流入）」を重視するようにした上で、さらに分離グラフや強連結でない
#有向グラフにも適用できるようにしたのが、あのSergey BrinとLawrence "Larry" Pageの2人
#が考案してGoogle検索の基になったPageRank
pdf(str_c(wdPath, "/pdf/", target_c[i], "_page_rank.pdf")) #Open PDF
gd.pr<-page.rank(g,directed=T)
plot(g,vertex.size=gd.pr$vector*300, main='Page Pank', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
page_rank_c[i] = var(str_subset(unlist(gd.pr), "\\d+"))
page_rank_c
dev.off()
#Bonapower:中心性の高いノードとつながるノードの中心性が低くなる
pdf(str_c(wdPath, "/pdf/", target_c[i], "_bonpow.pdf"))
g.bp<-bonpow(g,exponent=0.2)
plot(g,vertex.size=g.bp*5,main='Bona Power',edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
bonpow_c[i] = var(g.bp)
dev.off()
#Betweenness:あるノードが他のノード間の最短経路上に位置する「程度」を中心性指標とし
#たものが媒介中心性(betweeness centrality)
pdf(str_c(wdPath, "/pdf/", target_c[i], "_betweenness.pdf"))
g.bw<-betweenness(g,directed = T)
plot(g,vertex.size=g.bw*0.0025,main='Betweeness',edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
betweenness_c[i] = var(g.bw)
betweenness_c
dev.off()
}
View(data)
View(data)
for(i in 1:NumOfFiles){
##Read the edge's csv files under the designated working directory.
fileName = str_trim(ListOfFile[i], side="both")
data = read.csv(fileName, header=T, sep="\t")
##Store each calculated specific value into each value's vector object.
##At the same time, the binary 0 or 1 data is put into this vector's the first column as the teaching data.
#CSV file name.
target_c[i] = str_sub(ListOfFile[i], start = 17, end = -5)
#Teaching Data : Modified 1 , No-changed 0
#TODO: How to integrate gitbub information?
teaching_c[i] = 1
#Calculate the number of Jimple step.
length = data.frame(table(data[,3]))
step_c[i] = length[1,2] + length[2,2]
#Calculate CCNA = (The number of IF or GOTO jimple statement) - 1
s = 1
maxStep = step_c[i]
count = 0
if(maxStep > 1) {
for(s in 1:maxStep){
subset = str_sub(data[s,1], start=1, end=2)
if(subset == "if"){
count = count + 1
} else if( subset == "go") {
count = count + 1
}
}
} else if(maxStep <= 1){
count = 1
}
ccna_c[i] = count
#Detect CRUD info.
length[2,2]
idau_c[i] = length[2,2] / step_c[i]
#Delete Third CRUD boolean data.
data = data[,-3]
#Convert the data-frame to graph data.
g <- graph.data.frame(data, directed = TRUE)
#Get ride of the multiple edges and self loops from whole of graph.
g <- simplify(g,remove.multiple=T,remove.loops=T)
#Visualize this graph for check.
plot(g, vertex.size=3, vertex.label.font=0.1, vertex.label.cex=0.1, edge.arrow.size=0.3, vertex.color="blue", layout=layout_with_kk)
#Edge Density
edge_dencity_c[i] = c(edge_density(g))
#Graph Degree (variant)
graph_degree_c[i] = var(degree(g))
#近接中心性:ある要件を満たすグラフの最短経路長の「合計」に着目したものもあります。
#あるノードから他のノードへの最短経路長の合計*4の逆数を取ったものを「近接中心性」
#(closeness centrality)と呼びます。
pdf(str_c(wdPath, "/pdf/", target_c[i], "_closeness_centrality.pdf")) #Open PDF
closeness_centrality_c = c()
g.cls<-closeness(g,mode = 'out')
plot(g,vertex.size=g.cls*20000, main='Closeness Centrality', edge.arrow.size=0.3, vertex.label.cex=0.1, vertex.color="blue", layout=layout_with_kk)
closeness_centrality_c[i] = var(g.cls)
closeness_centrality_c
dev.off() #Save PDF
#「離心中心性」(eccentricity centrality):グラフ全体を最短経路長を長さの単位とする
#円（球）*2とみなした上で、その「中心」からの距離*3の逆数を取ったもの。端的に
#言えば、グラフのど真ん中に近ければ近いほど大きくなる。
pdf(str_c(wdPath, "/pdf/", target_c[i], "_eccentricity_centrality.pdf")) #Open PDF
eccentricity_centrality<-closeness(g,mode = "in") #in, all, out, total
plot(g, vertex.size=eccentricity_centrality*20000, main='Eccentricity Centrality', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
eccentricity_centrality_c[i] = var(eccentricity_centrality)
eccentricity_centrality_c
dev.off() #Save PDF
#Centralization
#固有ベクトル中心性:他の次数中心性の高いノード「とつながっている」ノードを評価するような指標
pdf(str_c(wdPath, "/pdf/", target_c[i], "_centralization.pdf")) #Open PDF
g.evcent<-evcent(g,directed = T)
plot(g,vertex.size=g.evcent$vector*15, main='Centralization', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
centralization_c[i] = var(str_subset(unlist(g.evcent), "\\d+"))
centralization_c
dev.off() #Save PDF
#PageRank:「リンク（流入）」を重視するようにした上で、さらに分離グラフや強連結でない
#有向グラフにも適用できるようにしたのが、あのSergey BrinとLawrence "Larry" Pageの2人
#が考案してGoogle検索の基になったPageRank
pdf(str_c(wdPath, "/pdf/", target_c[i], "_page_rank.pdf")) #Open PDF
gd.pr<-page.rank(g,directed=T)
plot(g,vertex.size=gd.pr$vector*300, main='Page Pank', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
page_rank_c[i] = var(str_subset(unlist(gd.pr), "\\d+"))
page_rank_c
dev.off()
#Bonapower:中心性の高いノードとつながるノードの中心性が低くなる
pdf(str_c(wdPath, "/pdf/", target_c[i], "_bonpow.pdf"))
g.bp<-bonpow(g,exponent=0.2)
plot(g,vertex.size=g.bp*5,main='Bona Power',edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
bonpow_c[i] = var(g.bp)
dev.off()
#Betweenness:あるノードが他のノード間の最短経路上に位置する「程度」を中心性指標とし
#たものが媒介中心性(betweeness centrality)
pdf(str_c(wdPath, "/pdf/", target_c[i], "_betweenness.pdf"))
g.bw<-betweenness(g,directed = T)
plot(g,vertex.size=g.bw*0.0025,main='Betweeness',edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
betweenness_c[i] = var(g.bw)
betweenness_c
dev.off()
}
##In case of my local directory.
wdPath = "/Users/amazon/app/01.eclipseWorkspaces/luna_soot/soot/tmp/igraph/csv"
setwd(wdPath)
##In case of on the my Google Drive when we execute this R script on the Google Colaborator.
#TODO
##Vector object for each graph feature value like Ede_Dencity something like that.
target_c = c()
teaching_c = c()
step_c = c()
ccna_c = c()
idau_c = c()
edge_dencity_c = c()
graph_degree_c = c()
closeness_centrality_c = c()
eccentricity_centrality_c = c()
centralization_c = c()
page_rank_c = c()
bonpow_c = c()
betweenness_c = c()
structure_fall_c = c()
#Loop : Define the following field objects:
##ListOfCsv : Stored all of csv file path information.
ListOfCsv = c()
##NumOfCsv  : The value how many times this graph analysis process should be repeated.
NumOfCsv = 0
ListOfFile = c()
NumOfFiles = 0
fileName = ""
data = data.frame("")
resultDf = data.frame("")
#Loop : Count the number of the csv files.
##If the target edge csv file is found out, NumOfCsv is counted up and the csv file path is stored into the ListOfCsv.
ListOfFile = list.files("/Users/amazon/app/01.eclipseWorkspaces/luna_soot/soot/tmp/igraph/csv")
NumOfFiles = length(ListOfFile)
NumOfFiles
#Loop : Calculate each graph specific values and generate graph visual data.
i = 1
for(i in 1:NumOfFiles){
##Read the edge's csv files under the designated working directory.
fileName = str_trim(ListOfFile[i], side="both")
data = read.csv(fileName, header=T, sep="\t")
##Store each calculated specific value into each value's vector object.
##At the same time, the binary 0 or 1 data is put into this vector's the first column as the teaching data.
#CSV file name.
target_c[i] = str_sub(ListOfFile[i], start = 17, end = -5)
#Teaching Data : Modified 1 , No-changed 0
#TODO: How to integrate gitbub information?
teaching_c[i] = 1
#Calculate the number of Jimple step.
length = data.frame(table(data[,3]))
step_c[i] = length[1,2] + length[2,2]
#Calculate CCNA = (The number of IF or GOTO jimple statement) - 1
s = 1
maxStep = step_c[i]
count = 0
if(maxStep > 1) {
for(s in 1:maxStep){
subset = str_sub(data[s,1], start=1, end=2)
if(subset == "if"){
count = count + 1
} else if( subset == "go") {
count = count + 1
}
}
} else if(maxStep <= 1){
count = 1
}
ccna_c[i] = count
#Detect CRUD info.
length[2,2]
idau_c[i] = length[2,2] / step_c[i]
#Delete Third CRUD boolean data.
data = data[,-3]
#Convert the data-frame to graph data.
g <- graph.data.frame(data, directed = TRUE)
#Get ride of the multiple edges and self loops from whole of graph.
g <- simplify(g,remove.multiple=T,remove.loops=T)
#Visualize this graph for check.
plot(g, vertex.size=3, vertex.label.font=0.1, vertex.label.cex=0.1, edge.arrow.size=0.3, vertex.color="blue", layout=layout_with_kk)
#Edge Density
edge_dencity_c[i] = c(edge_density(g))
#Graph Degree (variant)
graph_degree_c[i] = var(degree(g))
#近接中心性:ある要件を満たすグラフの最短経路長の「合計」に着目したものもあります。
#あるノードから他のノードへの最短経路長の合計*4の逆数を取ったものを「近接中心性」
#(closeness centrality)と呼びます。
pdf(str_c(wdPath, "/pdf/", target_c[i], "_closeness_centrality.pdf")) #Open PDF
closeness_centrality_c = c()
g.cls<-closeness(g,mode = 'out')
plot(g,vertex.size=g.cls*20000, main='Closeness Centrality', edge.arrow.size=0.3, vertex.label.cex=0.1, vertex.color="blue", layout=layout_with_kk)
closeness_centrality_c[i] = var(g.cls)
closeness_centrality_c
dev.off() #Save PDF
#「離心中心性」(eccentricity centrality):グラフ全体を最短経路長を長さの単位とする
#円（球）*2とみなした上で、その「中心」からの距離*3の逆数を取ったもの。端的に
#言えば、グラフのど真ん中に近ければ近いほど大きくなる。
pdf(str_c(wdPath, "/pdf/", target_c[i], "_eccentricity_centrality.pdf")) #Open PDF
eccentricity_centrality<-closeness(g,mode = "in") #in, all, out, total
plot(g, vertex.size=eccentricity_centrality*20000, main='Eccentricity Centrality', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
eccentricity_centrality_c[i] = var(eccentricity_centrality)
eccentricity_centrality_c
dev.off() #Save PDF
#Centralization
#固有ベクトル中心性:他の次数中心性の高いノード「とつながっている」ノードを評価するような指標
pdf(str_c(wdPath, "/pdf/", target_c[i], "_centralization.pdf")) #Open PDF
g.evcent<-evcent(g,directed = T)
plot(g,vertex.size=g.evcent$vector*15, main='Centralization', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
centralization_c[i] = var(str_subset(unlist(g.evcent), "\\d+"))
centralization_c
dev.off() #Save PDF
#PageRank:「リンク（流入）」を重視するようにした上で、さらに分離グラフや強連結でない
#有向グラフにも適用できるようにしたのが、あのSergey BrinとLawrence "Larry" Pageの2人
#が考案してGoogle検索の基になったPageRank
pdf(str_c(wdPath, "/pdf/", target_c[i], "_page_rank.pdf")) #Open PDF
gd.pr<-page.rank(g,directed=T)
plot(g,vertex.size=gd.pr$vector*300, main='Page Pank', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
page_rank_c[i] = var(str_subset(unlist(gd.pr), "\\d+"))
page_rank_c
dev.off()
#Bonapower:中心性の高いノードとつながるノードの中心性が低くなる
pdf(str_c(wdPath, "/pdf/", target_c[i], "_bonpow.pdf"))
g.bp<-bonpow(g,exponent=0.2)
plot(g,vertex.size=g.bp*5,main='Bona Power',edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
bonpow_c[i] = var(g.bp)
dev.off()
#Betweenness:あるノードが他のノード間の最短経路上に位置する「程度」を中心性指標とし
#たものが媒介中心性(betweeness centrality)
pdf(str_c(wdPath, "/pdf/", target_c[i], "_betweenness.pdf"))
g.bw<-betweenness(g,directed = T)
plot(g,vertex.size=g.bw*0.0025,main='Betweeness',edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
betweenness_c[i] = var(g.bw)
betweenness_c
dev.off()
}
resultDf = data.frame(target_c, teaching_c, step_c, ccna_c, idau_c, edge_dencity_c, graph_degree_c, eccentricity_centrality_c, centralization_c, page_rank_c, bonpow_c, betweenness_c)
resultDf
resultDf = data.frame(target_c, teaching_c, step_c, ccna_c, idau_c, edge_dencity_c, graph_degree_c, eccentricity_centrality_c, centralization_c, page_rank_c, bonpow_c, betweenness_c)
resultDf
#---Import packages from CPAN---#
#Install igraph package
install.packages("igraph")
#Install Stringr
install.packages("stringr")
#---Read Library---#
#Apply igraph library
library(igraph)
#Apply Stringr
library(stringr)
#Set working directory
##In case of my local directory.
wdPath = "/Users/amazon/app/01.eclipseWorkspaces/luna_soot/soot/tmp/igraph/csv"
setwd(wdPath)
##In case of on the my Google Drive when we execute this R script on the Google Colaborator.
#TODO
##Vector object for each graph feature value like Ede_Dencity something like that.
target_c = c()
teaching_c = c()
step_c = c()
ccna_c = c()
idau_c = c()
edge_dencity_c = c()
graph_degree_c = c()
closeness_centrality_c = c()
eccentricity_centrality_c = c()
centralization_c = c()
page_rank_c = c()
bonpow_c = c()
betweenness_c = c()
structure_fall_c = c()
#Loop : Define the following field objects:
##ListOfCsv : Stored all of csv file path information.
ListOfCsv = c()
##NumOfCsv  : The value how many times this graph analysis process should be repeated.
NumOfCsv = 0
ListOfFile = c()
NumOfFiles = 0
fileName = ""
data = data.frame("")
resultDf = data.frame("")
#Loop : Count the number of the csv files.
##If the target edge csv file is found out, NumOfCsv is counted up and the csv file path is stored into the ListOfCsv.
ListOfFile = list.files("/Users/amazon/app/01.eclipseWorkspaces/luna_soot/soot/tmp/igraph/csv")
NumOfFiles = length(ListOfFile)
NumOfFiles
#Loop : Calculate each graph specific values and generate graph visual data.
i = 1
for(i in 1:NumOfFiles){
##Read the edge's csv files under the designated working directory.
fileName = str_trim(ListOfFile[i], side="both")
data = read.csv(fileName, header=T, sep="\t")
##Store each calculated specific value into each value's vector object.
##At the same time, the binary 0 or 1 data is put into this vector's the first column as the teaching data.
#CSV file name.
target_c[i] = str_sub(ListOfFile[i], start = 17, end = -5)
#Teaching Data : Modified 1 , No-changed 0
#TODO: How to integrate gitbub information?
teaching_c[i] = 1
#Calculate the number of Jimple step.
length = data.frame(table(data[,3]))
step_c[i] = length[1,2] + length[2,2]
#Calculate CCNA = (The number of IF or GOTO jimple statement) - 1
s = 1
maxStep = step_c[i]
count = 0
if(maxStep > 1) {
for(s in 1:maxStep){
subset = str_sub(data[s,1], start=1, end=2)
if(subset == "if"){
count = count + 1
} else if( subset == "go") {
count = count + 1
}
}
} else if(maxStep <= 1){
count = 1
}
ccna_c[i] = count
#Detect CRUD info.
length[2,2]
idau_c[i] = length[2,2] / step_c[i]
#Delete Third CRUD boolean data.
data = data[,-3]
#Convert the data-frame to graph data.
g <- graph.data.frame(data, directed = TRUE)
#Get ride of the multiple edges and self loops from whole of graph.
g <- simplify(g,remove.multiple=T,remove.loops=T)
#Visualize this graph for check.
plot(g, vertex.size=3, vertex.label.font=0.1, vertex.label.cex=0.1, edge.arrow.size=0.3, vertex.color="blue", layout=layout_with_kk)
#Edge Density
edge_dencity_c[i] = c(edge_density(g))
#Graph Degree (variant)
graph_degree_c[i] = var(degree(g))
#近接中心性:ある要件を満たすグラフの最短経路長の「合計」に着目したものもあります。
#あるノードから他のノードへの最短経路長の合計*4の逆数を取ったものを「近接中心性」
#(closeness centrality)と呼びます。
pdf(str_c(wdPath, "/pdf/", target_c[i], "_closeness_centrality.pdf")) #Open PDF
closeness_centrality_c = c()
g.cls<-closeness(g,mode = 'out')
plot(g,vertex.size=g.cls*20000, main='Closeness Centrality', edge.arrow.size=0.3, vertex.label.cex=0.1, vertex.color="blue", layout=layout_with_kk)
closeness_centrality_c[i] = var(g.cls)
closeness_centrality_c
dev.off() #Save PDF
#「離心中心性」(eccentricity centrality):グラフ全体を最短経路長を長さの単位とする
#円（球）*2とみなした上で、その「中心」からの距離*3の逆数を取ったもの。端的に
#言えば、グラフのど真ん中に近ければ近いほど大きくなる。
pdf(str_c(wdPath, "/pdf/", target_c[i], "_eccentricity_centrality.pdf")) #Open PDF
eccentricity_centrality<-closeness(g,mode = "in") #in, all, out, total
plot(g, vertex.size=eccentricity_centrality*20000, main='Eccentricity Centrality', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
eccentricity_centrality_c[i] = var(eccentricity_centrality)
eccentricity_centrality_c
dev.off() #Save PDF
#Centralization
#固有ベクトル中心性:他の次数中心性の高いノード「とつながっている」ノードを評価するような指標
pdf(str_c(wdPath, "/pdf/", target_c[i], "_centralization.pdf")) #Open PDF
g.evcent<-evcent(g,directed = T)
plot(g,vertex.size=g.evcent$vector*15, main='Centralization', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
centralization_c[i] = var(str_subset(unlist(g.evcent), "\\d+"))
centralization_c
dev.off() #Save PDF
#PageRank:「リンク（流入）」を重視するようにした上で、さらに分離グラフや強連結でない
#有向グラフにも適用できるようにしたのが、あのSergey BrinとLawrence "Larry" Pageの2人
#が考案してGoogle検索の基になったPageRank
pdf(str_c(wdPath, "/pdf/", target_c[i], "_page_rank.pdf")) #Open PDF
gd.pr<-page.rank(g,directed=T)
plot(g,vertex.size=gd.pr$vector*300, main='Page Pank', edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
page_rank_c[i] = var(str_subset(unlist(gd.pr), "\\d+"))
page_rank_c
dev.off()
#Bonapower:中心性の高いノードとつながるノードの中心性が低くなる
pdf(str_c(wdPath, "/pdf/", target_c[i], "_bonpow.pdf"))
g.bp<-bonpow(g,exponent=0.2)
plot(g,vertex.size=g.bp*5,main='Bona Power',edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
bonpow_c[i] = var(g.bp)
dev.off()
#Betweenness:あるノードが他のノード間の最短経路上に位置する「程度」を中心性指標とし
#たものが媒介中心性(betweeness centrality)
pdf(str_c(wdPath, "/pdf/", target_c[i], "_betweenness.pdf"))
g.bw<-betweenness(g,directed = T)
plot(g,vertex.size=g.bw*0.0025,main='Betweeness',edge.arrow.size=0.3, vertex.color="blue",vertex.label.cex=0.1, layout=layout_with_kk)
betweenness_c[i] = var(g.bw)
betweenness_c
dev.off()
}
#Store each vector data into the final DataFrame object.
resultDf = data.frame(target_c, teaching_c, step_c, ccna_c, idau_c, edge_dencity_c, graph_degree_c, eccentricity_centrality_c, centralization_c, page_rank_c, bonpow_c, betweenness_c)
resultDf
#Export resultDf as a csv file.
write.csv(x=resultDf, file = "/Users/amazon/app/01.eclipseWorkspaces/luna_soot/soot/tmp/igraph/csv/result/resultDf.csv")
#Calculate AIC
#Calculate BIC
##In case of my local directory.
wdPath = "/Users/amazon/app/01.eclipseWorkspaces/luna_soot/soot/tmp/igraph/csv"
setwd(wdPath)
##Vector object for each graph feature value like Ede_Dencity something like that.
target_c = c()
teaching_c = c()
step_c = c()
ccna_c = c()
idau_c = c()
edge_dencity_c = c()
graph_degree_c = c()
closeness_centrality_c = c()
eccentricity_centrality_c = c()
centralization_c = c()
page_rank_c = c()
bonpow_c = c()
betweenness_c = c()
structure_fall_c = c()
